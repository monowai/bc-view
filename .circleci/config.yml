version: 2.1
orbs:
  node: circleci/node@5.2

# Global variables
variables:
  node_version: &node_version "20.12"
  node_image: &node_image "cimg/node:20.12"
  resource_class: &resource_class "medium"
  container_registry: &container_registry "ghcr.io"
  container_org: &container_org "monowai"

# Define reusable commands for better network resilience
commands:
  install-dependencies:
    description: "Install dependencies with retry logic"
    steps:
      - run:
          name: NPM Dependencies
          command: |
            # Configure yarn for better performance
            yarn config set network-timeout 60000
            yarn config set prefer-offline true

            # Install dependencies with smart cache handling
            echo "Installing dependencies..."

            # Only clear cache if @types/node is missing
            if [ ! -d "node_modules/@types/node" ]; then
              echo "❌ @types/node missing, clearing cache..."
              rm -rf node_modules
              yarn cache clean
            fi

            if yarn install --frozen-lockfile --prefer-offline --network-concurrency 8 --production=false; then
              echo "✅ Dependencies installed successfully"
            else
              echo "❌ yarn install failed!"
              exit 1
            fi

  build-application:
    description: "Build application with retry logic"
    steps:
      - run:
          name: Yarn Build
          command: |
            # Set Node.js memory limits for CI
            export NODE_OPTIONS="--max-old-space-size=4096"

            # Retry build with exponential backoff
            for i in {1..2}; do
              echo "Attempt $i of 2: Building application..."
              if yarn build; then
                echo "Build completed successfully"
                break
              else
                echo "Attempt $i failed, waiting before retry..."
                if [ $i -lt 2 ]; then
                  sleep 10
                else
                  echo "All build attempts failed. Exiting."
                  exit 1
                fi
              fi
            done

jobs:
  install-dependencies:
    docker:
      - image: *node_image
    resource_class: *resource_class
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "yarn.lock" }}
            - v2-dependencies-
      - node/install:
          install-yarn: true
          node-version: *node_version
      - install-dependencies
      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "yarn.lock" }}

  test:
    docker:
      - image: *node_image
    resource_class: *resource_class
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "yarn.lock" }}
            - v2-dependencies-
      - node/install:
          install-yarn: true
          node-version: *node_version
      - install-dependencies
      - restore_cache:
          keys:
            - v2-test-results-{{ checksum "yarn.lock" }}
      - run:
          name: Run Tests
          command: yarn test
      - run:
          name: Upload Coverage to Codacy
          command: |
            # Install Codacy coverage reporter
            curl -Ls -o codacy-coverage-reporter "$(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | contains("codacy-coverage-reporter-linux"))) | .[0].browser_download_url')"
            chmod +x codacy-coverage-reporter
            export CODACY_ORGANIZATION_PROVIDER=gh
            export CODACY_USERNAME=monowai
            export CODACY_PROJECT_NAME=bc-view
            # Upload coverage report if CODACY_API_TOKEN is set
            if [ -n "$CODACY_API_TOKEN" ]; then
              echo "Uploading coverage to Codacy..."
              ./codacy-coverage-reporter report -l TypeScript -r coverage/lcov.info --commit-uuid $CIRCLE_SHA1
              echo "✅ Coverage uploaded successfully"
            else
              echo "⚠️  CODACY_API_TOKEN not set, skipping coverage upload"
            fi
          when: always
      - save_cache:
          paths:
            - .jest-cache
          key: v2-test-results-{{ checksum "yarn.lock" }}

  build:
    docker:
      - image: *node_image
    resource_class: *resource_class
    environment:
      IMAGE_NAME: bc-view
      STACK_VER: << pipeline.number >>
      GIT_BRANCH: << pipeline.git.branch >>
      GIT_COMMIT: << pipeline.git.revision >>
      # SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}  # Temporarily disabled until token is configured
      CI: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "yarn.lock" }}
            - v2-dependencies-
      - node/install:
          install-yarn: true
          node-version: *node_version
      - install-dependencies
      - restore_cache:
          keys:
            - v2-build-cache-{{ checksum "yarn.lock" }}-{{ checksum "next.config.js" }}
      - run:
          name: Debug Build Environment
          command: |
            echo "Node version: $(node --version)"
            echo "Yarn version: $(yarn --version)"
            echo "Available memory: $(free -h)"
            echo "Disk space: $(df -h)"
            echo "Current directory: $(pwd)"
            echo "Files in current directory: $(ls -la)"
            echo "Checking critical dependencies..."
            echo "node_modules exists: $([ -d "node_modules" ] && echo "✅" || echo "❌")"

      - build-application
      - save_cache:
          paths:
            - .next
            - .next/cache
          key: v2-build-cache-{{ checksum "yarn.lock" }}-{{ checksum "next.config.js" }}

  docker-build:
    parameters:
      platform:
        type: string
    docker:
      - image: *node_image
    resource_class: *resource_class
    environment:
      DOCKER_BUILDKIT: 1
      IMAGE_NAME: bc-view
      CONTAINER_REGISTRY: *container_registry
      CONTAINER_ORG: *container_org
      STACK_VER: << pipeline.number >>
      GIT_BRANCH: << pipeline.git.branch >>
      GIT_COMMIT: << pipeline.git.revision >>
      PLATFORM: << parameters.platform >>
      # SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}  # Temporarily disabled until token is configured
      CI: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "yarn.lock" }}
            - v2-dependencies-
      - restore_cache:
          keys:
            - v2-build-cache-{{ checksum "yarn.lock" }}-{{ checksum "next.config.js" }}
      - node/install:
          install-yarn: true
          node-version: *node_version
      - install-dependencies
      - build-application
      - run:
          name: Prepare Docker Context
          command: |
            # Copy built artifacts to reduce Docker build time
            echo "Copying pre-built node_modules and .next to Docker context..."
            # These will be available in the Docker build context
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup Docker Buildx
          command: |
            # Create and use a new builder instance
            docker buildx create --name multiarch --driver docker-container --use
            docker buildx inspect --bootstrap
      - run:
          name: Package BC-VIEW (<< parameters.platform >>)
          command: |
            SHORT_COMMIT=$(git rev-parse --short $GIT_COMMIT)
            PLATFORM_TAG=$(echo "<< parameters.platform >>" | sed 's/\//-/g')

            # Login to Container Registry
            echo "$GH_GCR" | docker login $CONTAINER_REGISTRY -u "$DOCKER_USER" --password-stdin

            # Build and push using buildx with attestations disabled
            for i in {1..3}; do
              echo "Attempt $i of 3: Building and pushing Docker image for << parameters.platform >>..."
              if docker buildx build \
                --platform << parameters.platform >> \
                --build-arg GIT_BRANCH=$GIT_BRANCH \
                --build-arg GIT_COMMIT=$SHORT_COMMIT \
                --build-arg BUILD_ID=$STACK_VER \
                --cache-from type=gha \
                --cache-to type=gha,mode=max \
                --provenance=false \
                --sbom=false \
                --tag "$CONTAINER_REGISTRY/$CONTAINER_ORG/$IMAGE_NAME:latest-$PLATFORM_TAG" \
                --tag "$CONTAINER_REGISTRY/$CONTAINER_ORG/$IMAGE_NAME:${STACK_VER}-$PLATFORM_TAG" \
                --tag "$CONTAINER_REGISTRY/$CONTAINER_ORG/$IMAGE_NAME:latest" \
                --tag "$CONTAINER_REGISTRY/$CONTAINER_ORG/$IMAGE_NAME:${STACK_VER}" \
                --push \
                ~/project/.; then
                echo "✅ Docker build and push completed successfully for << parameters.platform >>"
                break
              else
                echo "Attempt $i failed for << parameters.platform >>, waiting before retry..."
                if [ $i -lt 3 ]; then
                  sleep $((i * 20))
                else
                  echo "❌ All Docker build attempts failed for << parameters.platform >>. Failing."
                  exit 1
                fi
              fi
            done

workflows:
  build_and_package:
    jobs:
      - install-dependencies:
          filters:
            branches:
              ignore:
                - /^renovate\/.*$/
            paths:
              ignore:
                - .github/**
      - test:
          requires:
            - install-dependencies
          filters:
            paths:
              ignore:
                - .github/**
      - build:
          requires:
            - install-dependencies
          filters:
            paths:
              ignore:
                - .github/**
      - docker-build:
          matrix:
            parameters:
              platform: ["linux/amd64", "linux/arm64"]
          requires:
            - test
            - build
          filters:
            paths:
              ignore:
                - .github/**
